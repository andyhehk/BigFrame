/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package bigframe.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Entities extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entities\",\"namespace\":\"bigframe.avro\",\"fields\":[{\"name\":\"hashtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"urls\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Url\",\"fields\":[{\"name\":\"expanded_url\",\"type\":[\"null\",\"string\"]},{\"name\":\"indices\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"url\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"user_mentions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"User_Mention\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"]},{\"name\":\"id_str\",\"type\":[\"null\",\"string\"]},{\"name\":\"indices\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"screen_name\",\"type\":[\"null\",\"string\"]}]}}]}]}");
  @Deprecated public java.util.List<java.lang.CharSequence> hashtags;
  @Deprecated public java.util.List<bigframe.avro.Url> urls;
  @Deprecated public java.util.List<bigframe.avro.User_Mention> user_mentions;

  /**
   * Default constructor.
   */
  public Entities() {}

  /**
   * All-args constructor.
   */
  public Entities(java.util.List<java.lang.CharSequence> hashtags, java.util.List<bigframe.avro.Url> urls, java.util.List<bigframe.avro.User_Mention> user_mentions) {
    this.hashtags = hashtags;
    this.urls = urls;
    this.user_mentions = user_mentions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hashtags;
    case 1: return urls;
    case 2: return user_mentions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hashtags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: urls = (java.util.List<bigframe.avro.Url>)value$; break;
    case 2: user_mentions = (java.util.List<bigframe.avro.User_Mention>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hashtags' field.
   */
  public java.util.List<java.lang.CharSequence> getHashtags() {
    return hashtags;
  }

  /**
   * Sets the value of the 'hashtags' field.
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<java.lang.CharSequence> value) {
    this.hashtags = value;
  }

  /**
   * Gets the value of the 'urls' field.
   */
  public java.util.List<bigframe.avro.Url> getUrls() {
    return urls;
  }

  /**
   * Sets the value of the 'urls' field.
   * @param value the value to set.
   */
  public void setUrls(java.util.List<bigframe.avro.Url> value) {
    this.urls = value;
  }

  /**
   * Gets the value of the 'user_mentions' field.
   */
  public java.util.List<bigframe.avro.User_Mention> getUserMentions() {
    return user_mentions;
  }

  /**
   * Sets the value of the 'user_mentions' field.
   * @param value the value to set.
   */
  public void setUserMentions(java.util.List<bigframe.avro.User_Mention> value) {
    this.user_mentions = value;
  }

  /** Creates a new Entities RecordBuilder */
  public static bigframe.avro.Entities.Builder newBuilder() {
    return new bigframe.avro.Entities.Builder();
  }
  
  /** Creates a new Entities RecordBuilder by copying an existing Builder */
  public static bigframe.avro.Entities.Builder newBuilder(bigframe.avro.Entities.Builder other) {
    return new bigframe.avro.Entities.Builder(other);
  }
  
  /** Creates a new Entities RecordBuilder by copying an existing Entities instance */
  public static bigframe.avro.Entities.Builder newBuilder(bigframe.avro.Entities other) {
    return new bigframe.avro.Entities.Builder(other);
  }
  
  /**
   * RecordBuilder for Entities instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entities>
    implements org.apache.avro.data.RecordBuilder<Entities> {

    private java.util.List<java.lang.CharSequence> hashtags;
    private java.util.List<bigframe.avro.Url> urls;
    private java.util.List<bigframe.avro.User_Mention> user_mentions;

    /** Creates a new Builder */
    private Builder() {
      super(bigframe.avro.Entities.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(bigframe.avro.Entities.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Entities instance */
    private Builder(bigframe.avro.Entities other) {
            super(bigframe.avro.Entities.SCHEMA$);
      if (isValidValue(fields()[0], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[0].schema(), other.hashtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.urls)) {
        this.urls = data().deepCopy(fields()[1].schema(), other.urls);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_mentions)) {
        this.user_mentions = data().deepCopy(fields()[2].schema(), other.user_mentions);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'hashtags' field */
    public java.util.List<java.lang.CharSequence> getHashtags() {
      return hashtags;
    }
    
    /** Sets the value of the 'hashtags' field */
    public bigframe.avro.Entities.Builder setHashtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.hashtags = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'hashtags' field has been set */
    public boolean hasHashtags() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'hashtags' field */
    public bigframe.avro.Entities.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'urls' field */
    public java.util.List<bigframe.avro.Url> getUrls() {
      return urls;
    }
    
    /** Sets the value of the 'urls' field */
    public bigframe.avro.Entities.Builder setUrls(java.util.List<bigframe.avro.Url> value) {
      validate(fields()[1], value);
      this.urls = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'urls' field has been set */
    public boolean hasUrls() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'urls' field */
    public bigframe.avro.Entities.Builder clearUrls() {
      urls = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user_mentions' field */
    public java.util.List<bigframe.avro.User_Mention> getUserMentions() {
      return user_mentions;
    }
    
    /** Sets the value of the 'user_mentions' field */
    public bigframe.avro.Entities.Builder setUserMentions(java.util.List<bigframe.avro.User_Mention> value) {
      validate(fields()[2], value);
      this.user_mentions = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user_mentions' field has been set */
    public boolean hasUserMentions() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user_mentions' field */
    public bigframe.avro.Entities.Builder clearUserMentions() {
      user_mentions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Entities build() {
      try {
        Entities record = new Entities();
        record.hashtags = fieldSetFlags()[0] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.urls = fieldSetFlags()[1] ? this.urls : (java.util.List<bigframe.avro.Url>) defaultValue(fields()[1]);
        record.user_mentions = fieldSetFlags()[2] ? this.user_mentions : (java.util.List<bigframe.avro.User_Mention>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
